Commiting to git happens after a file enters staging area. Git is used to track file changes. Track all your changes commit changes and perform
version control.Using  command



git init 

to make an empty git repo. This creates a .git file which is a hidden file. You can see with the ls -a flag in command
line.

This is the git working directory. In order to start version control on this file. I need to enter it into a staging area. You can pick which files inside
the working directory you want to commit. you can check if a file in your working directory is in the staging area with
 
git status

ALl the red files shown will be present in the directory but not in the staging area. Use command

git add myfile1.txt

to add to staging ready to be commited. i use command 

git commit -m "First version of file"

-m flag lets you pass a message about your current commit. (Highly recommended)	commits are written in the present tense as
best practice.

If you are having many files in a working directory commonly. Then to avoid tediousness with git add we will use the . to specify all files to be 
send to staging area in the working directory. Using

git log

to see the commits we have made. Each commit will have a uniquely identifying hash. The git log will show (Head => master)

at the latest commit. 

after git commit our file(s) will be inside the local repository which is .git mentioned earlier. And that version is given a name through

git -m 

Even if we messed up our file in the working directory we can roll back on changes and replace our working directory version with the local repository
version with a command

git checkout myfile1.txt

If i make mistakes in myfile1.txt I can revert the changes i made in the working directory. Using

git status

i can verify that git recognizes the modified files outside the staging area. We can even see the differences between the last commit and our recent file in the
working directory. Using command

git diff myfile1.txt

You can see then the deleted parts in red and the added part with dark green color. 


This was all about local implementation of git. Github is when you will create remote repositories.

The first thing is creating a remote. Which means telling your local working directory aka git repository that i have created a remote repository somewhere on the
interwebs. And i want to transfer all of my commits over theere. The command to use is \

git remote add origin https://github.com/an...

where origin is the name of the remote theoretically you can call it anything you want. But by convention and best practice you should use origin because most pros
are used to the conventional naming. Then you paste the url of the remote repo on github. Then we hit enter. And the remote is created. So we can now push our local repo
to our remote repo which is called origin. Then using command 

git push -u origin master 

This pushes your local repo to the remote repo using the -u flag. -u links up your local and remote repositories. And then we push it to remote called origin on the branch called
master. The master branch is the default branch or the main branch of all of your commits.

Then somework is done uploading local to remote on github servers. Finally you will go back to the remote repository setup page on github. Refresh and all of your local repo will end
up on remote. Going to insights-graphs-network you can see our master branch. Which currently has 2 save points. Hovering on them to see commit messages.

Your master branch is a timeline of all your main commits or savepoints. It is sequential and usually where your main progress is saved. 

.gitignore is a hidden file made inside your working git directory 

(Deprecated since Github now allows private repos but still useful to some degree in teams) If you have file(s) inside your working directory that contain Passwords or API Keys which you dont 
want hosted on open platform like Github. There have been horror stories of AWS keys in Github abused until all of it was wiped clean. \
Its really important to think about these things before hand. Another type of file you might want to include in .gitignore or not include in Github is .DS_store which are files to do with
your local settings or user preferences and there's a whole bunch of these utility files unneccesary for running an app.

ls -a is important for git and github because they will send hidden files to staging areas.

touch .gitignore
 makes the git ignore file. And here you will enter the files to be ignored when we commit our files to github.

git init
git add .
git status
adds all files to staging area including secrets.txt and .DS_store. I dont want that so i must undo the last step and remove all files from staging area using command
git rm --cached -r .
git remove all(.) the cached files recursively(-r) from the directory. 

In order to ignore open the .gitignore file and the name of the file to ignore on each line. In our case
.DS_store
secrets.txt
# gitignore uses the pound sign to make a comment. Another thing you can do is use
* wildcards. so saying
#*.txt means that all files with .txt extension will be ignored.

so saving the file and closing it. and git add . will not send the 2 files .DS_store and secrets.txt 

git commit -m "initial commit"
then the only files put onto my local machine will be without .DS_store and .secrets.txt and if i push this to github it
will only be those files.

if you go to github.com/gitignore it is the official repository useful templates or premade collection of useful gitignore files.
we open swift.gitignore which contains all the files we wont want uploading to github. So things like user defaults or user settings.

pulling from a remote repository into your local repository is called cloning with the command
git clone 
that is a way for you to pull down all of the commits and versions from the remote repository and to store the fiels inside your 
working directory.

go to  github/ open source ios apps which is a collaborative list of really awesome opensource ios apps. Browse by category and 
browse all the projects people made open source on github. Learn how they format code really good resource recommend to bookmark.

We take a look at 2048 by austin zheng to see their commit history and clone their project.

The way to clone a git repo is to copy the url of the repository on the green button clone or download.
go to our terminal and
git clone https://github.com/au..

It will clone into my current working directory (remember where git init has been performed)

Another thing to realize is that once you gitcloned a project and you cd into it. You can also use gitlog to check out 
their previous commit history. And you will see commit messages telling what each commit was about.
In the future when you grab any of the skeleton proj from our git repo then you will be abel to use git clone to grab and
download it onto your local system.

Branching is a slightly advanced concept in git terminology. It means you are creating parallel threads with your master repo
where you are making experimental beta features or addons to your software. This means you can work on these branches without 
affecting the progress of the main branch. Each branch features it's own commits and version history. 
First demonstrated inside the local working directory. So going to this folder gitPractice, You just use the command

git branch mybetastoryboard

to make a branch. Use command

git branch
to see a log of branches you currently have in your project. The one with asterisk shows which branch you are currently on
mybetastoryboard
*master

we can switch to betastoryboard by command

git checkout mybetastoryboard

So now we are inside the other branch. Here i make changes to myfile1.txt We have decided to remove a large chunk of text from this
and make a lite version of this file. So we say

git add .
git commit -m "Made first commit on branch ready for lite version"

If we do a git log 

We see our commit history showing Head/mybetastoryboard preceding the master commit before that.

when you are confused about where you are you can always do a git branch check
to see which one has asterisk

git checkout master

to go back to the master branch. master branch is unchanged with respect to its content.

touch myfile2.txt

git add . 
git commit -m "make another chapter"

git log

This is the log we are currently looking at is of the master branch and we have 3 commits. 
commit : sdfsdfwerfsfsdfsdf45454f433f3 (origin/master) highlighted in red

This is the position of our remote repo. on our github repo that was the commit it can see.
But on our local repo is the latest commit.
commit :e343f3gg3g3e3fok3okj34i3j3d3i (HEAD -> master) head in blue

If i switch between the branches and go over to 
git checkout mybetastoryboard

you will see my local directory files actually changed as i switched branches.

lets say im happy with my branch changes. The experimentation results were exceptional and its time to merge the branches. 

in order to do that
 go back to the master branch
git checkout master
and while on thhe master we will merge changes inside the alien plot branch.

git merge <branch-name> 
git merge mybetastoryboard

this opens the vim editor to write message for commit. Alternatively we can close from vim using :q!
to close out of vim.

git log

i have absorbed mybetastory into the master.

git branch

mybetastoryboard still exists as a seperate branch. at this point we do

git push origin master -u

and our repo is remote updated online.

on github.com i can go over to the insights tab inside insights we go to graphs then network to see a graphical view of our commit
this lets you see where you currently are with your github repo.


going over to github repository, you will find more lecture notes on github itself.
